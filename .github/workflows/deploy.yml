name: CD

on:
  push:
    branches: [ "main", "dev" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production
    outputs:
      image_uri: ${{ steps.meta.outputs.image_uri }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Build Jar
        run: ./gradlew clean build
        env:
          SPRING_PROFILES_ACTIVE: prod

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Build Docker image
        run: |
          IMAGE="${IMAGE_NAME:-otboo-aws-deploy}"
          docker build -t "$IMAGE:${{ github.sha }}" .
        env:
          IMAGE_NAME: ${{ vars.IMAGE_NAME }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker image
        id: meta
        env:
          REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_NAME: ${{ vars.IMAGE_NAME }}
          SHA: ${{ github.sha }}
        run: |
          IMAGE="${IMAGE_NAME:-otboo-aws-deploy}"
          IMAGE_URI="$REGISTRY/$IMAGE:$SHA"
          docker tag "$IMAGE:$SHA" "$IMAGE_URI"
          docker push "$IMAGE_URI"
          echo "image_uri=$IMAGE_URI" >> "$GITHUB_OUTPUT"   

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: otboo-container
          container-image: ${{ needs.build-and-push.outputs.image_uri }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}

# AWS 설정에 따라 변경해주어야 하는 값
# secrets -> AWS_ACCESS_KEY, AWS_SECRET_KEY, ECR_REGISTRY, ECS_CLUSTER, ECS_SERVICE
# vars -> IMAGE_NAME, AWS_REGION
# ecs-task-def.json -> 루트 디렉토리에 해당 파일을 만들어 사용할 태스크 정의와 family, 컨테이너 이름 ( container-name과 일치 ), 리소스/포트/ENV 설정을 그대로 반영
# aws-actions/configure-aws-credentials@v4 스텝을 넣고 aws-region: ${{vars.AWS_REGION}}처럼 리전을 지정하여야 한다. ( 빠질 시 해당 명령이 인증을 못함. )

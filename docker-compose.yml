# 1) ElasticSearch
services:
  es01:
    build:
      context: ./es
      dockerfile: Dockerfile
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME:-es-dev}
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ulimits:
      memlock: { soft: -1, hard: -1 }
    volumes:
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - "${ES_PORT:-9200}:9200"
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:9200 | grep -q 'You Know, for Search'" ]
      interval: 10s
      timeout: 5s
      retries: 30

  # 2) Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION:-8.18.5}
    container_name: kibana
    depends_on:
      es01:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - XPACK_SECURITY_ENABLED=false
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    volumes:
      - kibanadata:/usr/share/kibana/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS -I http://localhost:5601 | grep -q 'HTTP/1.1 302'" ]
      interval: 10s
      timeout: 10s
      retries: 60

  # 3) PostgreSQL
  postgres:
    image: postgres:17-alpine
    container_name: otboo-db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-otboo}
      POSTGRES_USER: ${POSTGRES_USER:-otboo}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-otboo}
    ports:
      - "${POSTGRES_PORT:-54321}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/01-init-data.sql:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-otboo} -d ${POSTGRES_DB:-otboo}" ]
      interval: 10s
      timeout: 5s
      retries: 10

  # 4) Redis
  redis:
    image: redis:7.2-alpine
    container_name: otboo-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 10

  # 5) Spring Boot App
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: otboo-app
    restart: unless-stopped
    depends_on:
      es01:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      PROJECT_NAME: ${PROJECT_NAME:-otboo}
      JVM_OPTS: ${JVM_OPTS:-"-Xms512m -Xmx512m"}
      # DB
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-otboo}
      POSTGRES_USER: ${POSTGRES_USER:-otboo}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-otboo}
      POSTGRES_SCHEMA: ${POSTGRES_SCHEMA:-public}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # ES (앱에서 사용할 주소)
      ES_BASE_URL: http://es01:9200
      # 기타 시크릿
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-dev-access}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev-refresh}
      GOOGLE_ID: ${GOOGLE_ID:-}
      GOOGLE_PASSWORD: ${GOOGLE_PASSWORD:-}
      KAKAO_REST_API_KEY: ${KAKAO_REST_API_KEY:-}
      KAKAO_API_BASE_URL: ${KAKAO_API_BASE_URL:-}
    ports:
      - "8080:8080"

volumes:
  esdata01:
  kibanadata:
  postgres_data:
